{"version":3,"sources":["DisplayNote/Note.js","AddNote/AddNote.js","NoteDraft/NoteDraft.js","Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","className","src","note","url","alt","title","body","author_name","status","date","onClick","delete","AddNote","type","data-toggle","data-target","id","tabIndex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","htmlFor","name","placeholder","onChange","changed","authenticate","Draft","publish","Home","useState","notes","initialNotesState","setInitialNotesState","notesState","setNotesState","notesDraftState","setNotesDraftState","titleState","setTitleState","bodyState","setBodyState","author","authorState","setAuthorState","isLoading","setIsLoading","useEffect","a","axios","response","data","fetchData","addNoteHandler","Date","toLocaleDateString","newNote","deleteNoteHandler","index","splice","onInput","event","filteredNotes","filter","toUpperCase","indexOf","target","value","attrChangedHandler","alert","document","getElementById","reset","authenticateModalHandler","filtered","sort","b","split","reverse","join","map","key","length","draft","publishDraftHandler","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7231f2ba.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Note.css'\r\n\r\nconst Task = (props) => {\r\n\r\n    return (\r\n        <div className=\"note col col-lg-4 col-sm-12\">\r\n            <div className=\"card m-2\">\r\n            <img src={props.note.url} className=\"card-img-top\" alt=\"img\"/>\r\n                <div className=\"card-body\">\r\n                <h5 className=\"card-title text-left\">{props.note.title}</h5>\r\n                <p className=\"card-text text-left\">{props.note.body}</p>\r\n                </div>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    <li className=\"list-group-item\">By: <strong>{props.note.author_name}</strong></li>\r\n                    <li className=\"list-group-item\"><span className={\"badge badge-pill \" + (props.note.status === 'completed' ? \"badge-success\" : \"badge-warning\") }>{props.note.status}</span></li>\r\n                    <li className=\"list-group-item\"> {props.note.date}</li>\r\n                </ul>\r\n                <div className=\"card-body\">\r\n                    <button className=\"card-link btn btn-danger btn-sm text-white\" onClick={props.delete}>Delete</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Task;\r\n","import React from 'react'\r\n\r\nconst AddNote = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#modal\">New Note</button>\r\n\r\n            <div className=\"modal fade\" id=\"modal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"modalLabel\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog\" role=\"document\">\r\n                <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\" id=\"modalLabel\">Add New Note</h5>\r\n                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                    </button>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                <form id=\"myForm\">\r\n                    <div className=\"form-group text-left\">\r\n                        <label htmlFor=\"note-title \">Note title:</label>\r\n                        <input type=\"text\" className=\"form-control\" name=\"title\" id=\"note-title\" placeholder=\"Enter note title...\" onChange={props.changed}/>\r\n                    </div>\r\n                    <div className=\"form-group text-left\">\r\n                        <label htmlFor=\"note-body \">Note body:</label>\r\n                        <input type=\"text\" className=\"form-control\" name=\"body\" id=\"note-body\" placeholder=\"Enter note body...\" onChange={props.changed}/>\r\n                    </div>\r\n                    <div className=\"form-group text-left\">\r\n                        <label htmlFor=\"note-author \">Note author:</label>\r\n                        <input type=\"text\" className=\"form-control\" name=\"author\" id=\"note-author\" placeholder=\"Enter note author...\" onChange={props.changed}/>\r\n                    </div>\r\n                    </form>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                    <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                    <button type=\"button\" className=\"btn btn-warning\" name=\"drat\" onClick={props.authenticate}>Save As Draft</button>\r\n                    <button type=\"button\" className=\"btn btn-success\" name=\"post\" onClick={props.authenticate} >Add Note</button>\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default AddNote","import React from 'react'\r\n\r\nconst Draft = (props) => {\r\n\r\n    return (\r\n        <div className=\"note col col-lg-4 col-sm-12\">\r\n            <div className=\"card m-2\">\r\n            <img src={props.note.url} className=\"card-img-top\" alt=\"img\"/>\r\n                <div className=\"card-body\">\r\n                <h5 className=\"card-title text-left\">{props.note.title}</h5>\r\n                <p className=\"card-text text-left\">{props.note.body}</p>\r\n                </div>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    <li className=\"list-group-item\">By: <strong>{props.note.author_name}</strong></li>\r\n                    <li className=\"list-group-item\"><span className={\"badge badge-pill \" + (props.note.status === 'completed' ? \"badge-success\" : \"badge-warning\") }>{props.note.status}</span></li>\r\n                    <li className=\"list-group-item\"> {props.note.date}</li>\r\n                </ul>\r\n                <div className=\"card-body\">\r\n                    <button className=\"card-link btn btn-info btn-sm text-white\" onClick={props.publish}>Publish</button>\r\n                    <button className=\"card-link btn btn-danger btn-sm text-white\" onClick={props.delete}>Delete</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Draft;\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport Note from './../DisplayNote/Note'\r\nimport AddNote from './../AddNote/AddNote'\r\nimport Draft from './../NoteDraft/NoteDraft'\r\nimport axios from 'axios'\r\n\r\nconst Home = () => {\r\n  // App states initialization\r\n  const [initialNotesState, setInitialNotesState] = useState({notes: []})\r\n  const [notesState,setNotesState] = useState({notes: []});\r\n  const [notesDraftState,setNotesDraftState] = useState({notes: []});\r\n  const [titleState, setTitleState] = useState({title: null})\r\n  const [bodyState, setBodyState] = useState({body: null})\r\n  const [authorState, setAuthorState] = useState({author: null})\r\n\r\n  // Helper variables for handling UI until state is loaded\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n   // Fetch notes from JSON file and use as initial state\r\n   useEffect( () => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      const response = await axios('./Data/Notes.JSON')\r\n      setInitialNotesState({\r\n        notes: response.data.data\r\n      })\r\n      setNotesState({\r\n        notes: response.data.data\r\n      })\r\n      setIsLoading(false);\r\n    }\r\n    fetchData()\r\n  }, [])\r\n\r\n  // Method for authenticating modal data before submitting\r\n  const authenticateModalHandler = (event) => {\r\n    if(titleState.title === null || bodyState.body === null || authorState.author === null) {\r\n      alert('You must fill in all fields!')\r\n    } else {\r\n      if(event.target.name === 'post') {\r\n        addNoteHandler('note')\r\n        alert('Note Added!')\r\n        document.getElementById('myForm').reset()  \r\n      } else {\r\n        addNoteHandler('draft')\r\n        alert('Note Draft Added!')\r\n        document.getElementById('myForm').reset() \r\n      }\r\n    }\r\n  }\r\n\r\n  // Method for updating note attributes state from the child component\r\n  const attrChangedHandler = (event) => {\r\n    if(event.target.name === 'title') {\r\n      setTitleState({\r\n        title: event.target.value\r\n      })\r\n    } else if(event.target.name === 'body') {\r\n      setBodyState({\r\n        body: event.target.value\r\n      })\r\n    } else {\r\n      setAuthorState({\r\n        author: event.target.value\r\n      })\r\n    }\r\n  }\r\n\r\n  // Method for adding new note (published and draft) depending on the passed parameter\r\n  const addNoteHandler = (type) => {\r\n    const date = new Date().toLocaleDateString('en-GB')\r\n    const newNote = {\r\n      title: titleState.title,\r\n      body: bodyState.body,\r\n      author_name: authorState.author,\r\n      status: 'ongoing',\r\n      date: date,\r\n      url: 'https://cdn.pixabay.com/photo/2019/11/02/20/18/fog-4597348_960_720.jpg'\r\n    }\r\n    if(type === 'note') {\r\n      setNotesState({\r\n        notes: [...notesState.notes,newNote]\r\n      })\r\n      setInitialNotesState({\r\n        notes: [...notesState.notes,newNote]\r\n      })\r\n    } else {\r\n      setNotesDraftState({\r\n        notes: [...notesDraftState.notes,newNote]\r\n      })\r\n    }\r\n  }\r\n\r\n  // Method for deleting notes (published and draft) depending on the passed parameter\r\n  const deleteNoteHandler = (index, type) => {\r\n    if(type === 'notes') {\r\n      const notes = [...notesState.notes]\r\n      notes.splice(index,1)\r\n      setNotesState({\r\n        notes: notes\r\n      })\r\n      setInitialNotesState({\r\n        notes: notes\r\n      })\r\n    } else {\r\n      const notes = [...notesDraftState.notes]\r\n      notes.splice(index,1)\r\n      setNotesDraftState({\r\n        notes: notes\r\n      })\r\n    }\r\n  }\r\n\r\n  // Method for publishing drafts\r\n  const publishDraftHandler = (index) => {\r\n    const draft = notesDraftState.notes[index]\r\n    setNotesState({\r\n      notes: [...notesState.notes, draft]\r\n    })\r\n    setInitialNotesState({\r\n      notes: [...notesState.notes, draft]\r\n    })\r\n    deleteNoteHandler(index, 'draft')\r\n  }\r\n\r\n  // Method for filtering published notes\r\n  const filterNotesHandler = (event) => {\r\n    const allNotes = [...initialNotesState.notes]\r\n    const filteredNotes = allNotes.filter( note => {\r\n      return note.title.toUpperCase().indexOf(event.target.value.toUpperCase()) > -1\r\n    })\r\n    setNotesState({\r\n      notes: filteredNotes\r\n    })\r\n  }\r\n\r\n  // Method for sorting published notes by date\r\n  const sortByDate = () => {\r\n    const filtered = notesState.notes.sort((a, b) => {\r\n      let aa = a.date.split('/').reverse().join()\r\n      let bb = b.date.split('/').reverse().join()\r\n      return aa > bb ? -1 : 0\r\n    });\r\n      setNotesState({\r\n        notes: filtered\r\n      })\r\n  }\r\n\r\n \r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <h4>Filter Notes:</h4>\r\n      <input type='text' onInput={filterNotesHandler} className=\"m-2 p-1\"/>\r\n\r\n      <AddNote \r\n      changed={(event) => attrChangedHandler(event)}\r\n      authenticate={(event) => authenticateModalHandler(event)}/>\r\n\r\n      <button className=\"btn btn-warning m-2\" onClick={sortByDate}>Sort By Date</button>\r\n      \r\n      {/* Check if the initial state is loaded before listing notes, else showing \"Loading\" message */}\r\n      {isLoading ? (\r\n        <div>Loading ...</div>\r\n      ) : (\r\n      <div className=\"App row\">\r\n\r\n      {notesState.notes.map((note, index) =>\r\n        <Note \r\n        note = {note}\r\n        delete={() => deleteNoteHandler(index, 'notes')} \r\n        key={index}/>\r\n      )} \r\n      </div>\r\n      )} \r\n      <hr />\r\n\r\n      {/* Showing draft component only if the draft's array is not empty */}\r\n      {notesDraftState.notes.length > 0 ? (\r\n        <div className=\"App row\">\r\n        <h2 className=\"col col-lg-12\">Note Drafts:</h2>\r\n        {notesDraftState.notes.map((note, index) =>\r\n          <Draft \r\n          note = {note}\r\n          delete={() => deleteNoteHandler(index, 'drafts')}\r\n          publish={() => publishDraftHandler(index)}\r\n          key={index}/>\r\n        )} \r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )} \r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport './App.css';\nimport Home from './Home/Home'\n\nconst App = () => {\n  return (\n    <div className=\"container text-center\">\n      <h2>Ugly Notes App:</h2>\n      <hr />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}